/*!
\mainpage kalman-cpp

\section linear-kalman Kalman Filter for Linear Systems
\subsection definition_kf Definition

A linear system is described as follows.
\f[x_k = Ax_{k-1} + Bu_{k-1} + v_{k-1}\f]
\f[z_k = Hx_k + w_k\f]
where:\n
\f$v\f$ is the process noise (Gaussian with covariance Q)\n  
\f$w\f$ is the measurement noise (Gaussian with covariance R)\n 
\f$A\f$ is the system matrix\n
\f$B\f$ is the input matrix\n
\f$H\f$ is the output matrix\n
\f$x\f$ is the state vector\n
\f$z\f$ is the output vector\n
\f$u\f$ is the input vector\n\n
The noise covariance matrices must follow these conditions:\n
\f[Q = Q^T\f]
\f[R = R^T\f]

\subsection example_kf Examples

An example provided in main1.cpp solves<a href="http://www.mathworks.com/matlabcentral/fileexchange/18465-learning-the-kalman-filter-in-simulink-v2-1/content/html/runkalmanfilter.html">the car voltmeter problem</a> using this library. 
The system model for this problem is governed by:
\n
\f[x_k = 12 + v_{k-1}\f]
\f[z_k = x_k + w_ḳ\f]
\n
Therefore, we can summarize:  \f$A = 0\f$, \f$B = 1\f$, \f$H = 1\f$, \f$u = 12\f$, \f$x_0 = 12\f$, \f$Q=4\f$, and \f$R=4\f$. 
These values are the put into the following lines of codes.
\n\n
\code{.cpp}
mat A(1,1), B(1,1), H(1,1), Q(1,1), R(1,1);
colvec u(1);  

A << 0;
B << 1;
Q << 4;
H << 1;
R << 4;
u << 12.0;
\endcode
\n\n
The first line of the code above is used to create all necessary matrices with correct dimensions. 
All matrix operations use the Armadillo library. 
Please refer to the Armadillo documentation on how to create a matrix and set its element values.
The next step is to create an instance of class KF and initialize it with the newly created 
\f$A\f$, \f$B\f$, \f$Q\f$, \f$H\f$, and \f$R\f$. 
\n
\code{.cpp}
KF kalman;
kalman.InitSystem(A, B, H, Q, R);
\endcode
\n\n
The last step is to run the Kalman iteratively as shown in the codes below.
\n\n
\code{.cpp}
for (int k = 0; k < 100; k++) {
  kalman.Kalmanf(u);
  
  // The rest of the code 
}
\endcode
\n
@image HTML ../images/ex1.png

\section non-linear-kalman Extended Kalman Filter (EKF) for nonlinear systems
\subsection definition_ekf Definition

A non-linear system is described by:
\f[x_k = f(x_{k-1}, u_{k-1}) + v_{k-1}\f]
\f[z_k = h(x_k) + w_k\f]
where:\n 
\f$f\f$ is the dynamic model of the system\n
\f$h\f$ is the measurement model of the system\n
\f$v\f$ is the process noise (Gaussian with covariance Q)\n  
\f$w\f$ is the measurement noise (Gaussian with covariance R)\n 
\f$x\f$ is the state vector\n
\f$z\f$ is the output vector\n
\f$u\f$ is the input vector\n\n
The noise covariance matrices must follow these conditions:\n
\f[Q = Q^T\f]
\f[R = R^T\f]

\subsection example_ekf Example

Here, main4.cpp is taken as an example which is originally adapted from this  
<a href="http://ch.mathworks.com/matlabcentral/fileexchange/38302-kalman-filter-package/content//Kalman%20Filter%20Package/Examples/ExtendedKalmanFilterDemo.m">MATLAB Central page.</a> 
\n\n
The nonlinear system is described as follows.
\n\n
\f[ f = \begin{bmatrix} \sin(x_2(k-1))(k-1) \\ x_2(k-1) \end{bmatrix} \f]
\f[ h = \begin{bmatrix} x_1(k) \\ x_2(k) \end{bmatrix} \f]
\f[ x_0 = \begin{bmatrix} 0 \\ \frac{1 \pi}{500} \end{bmatrix}\f]
\n
The EKF class needs to be derived to allow flexible implementation of the dynamic model as well as the measurement model of the current system .
\n\n
\code{.cpp}
class MyEKF: public EKF
{
public:  
  virtual colvec f(const colvec& x, const colvec& u) {
    colvec xk(nOutputs_);
    xk(0) = sin(x(1) * u(0));
    xk(1) = x(1);
    return xk;
  }
  
  virtual colvec h(const colvec& x) {
    colvec zk(nOutputs_);
    zk(0) = x(0);
    zk(1) = x(1);
    return zk;
  }
};
\endcode
\n\n
The following steps are very similiar to the previous example as in the linear Kalman filter. 
First, we start by defining the number of states and outputs. 
Next, we derive the two functions: the process and the output function, in order to implement the system that we have. 
Afterwards, we continue with creating and initializing the two matrices: Q and R.
Finally, an instance of EKF class is created afterwards followed by initialization of state variables.
\n\n
\code{.cpp}
int main(int argc, char** argv)
{
   //
   // Log the result into a tab delimitted file, later we can open 
   // it with Matlab. Use: plot_data4.m to plot the results.
   //
  ofstream log_file;
  log_file.open("log_file4.txt");
  
  int n_states = 2;
  int n_outputs = 2;
  mat Q(2, 2);
  mat R(2, 2);
  
  Q << 0.001 << 0    << endr
    << 0     << 0    << endr;
    
  R << 0.1   << 0    << endr
    <<   0   << 0.01 << endr;
  
  colvec x0(2);
  x0 << 0 << 1 * M_PI / 500;
  
  colvec u(1);
   
  MyEKF myekf;
  myekf.InitSystem(n_states, n_outputs, Q, R);
  myekf.InitSystemState(x0);
  
  for (int k = 0; k < 1000; k ++) {
    u(0) = k;
    myekf.EKalmanf(u);
    
    colvec *x = myekf.GetCurrentState();
    colvec *x_m = myekf.GetCurrentEstimatedState();
    colvec *z = myekf.GetCurrentOutput();
    
    log_file << k 
             << '\t' << z->at(0,0) << '\t' << x->at(0,0) << '\t' << x_m->at(0,0)
             << '\t' << z->at(1,0) << '\t' << x->at(1,0) << '\t' << x_m->at(1,0)
             << '\n'; 
  }
  
  log_file.close();
  
  return 0;
}
\endcode

@image HTML ../images/ex4.png

\section unscented-kalman Unscented Kalman Filter (UKF) for a nonlinear system

Another type of Kalman Filter for a nonlinear system is the Unscented Kalman Filter. 
It addresses the accuracy problem which arises during linearization process of an Extended Kalman filter when Jacobian is used.
The Unscented Kalman Filter is implemented in class UKF.
\n\n
The steps for using UKF class is exactly similiar as in using EKF class. 
First, we start by defining the number of states and outputs. 
Next, we derive the two functions: the process and the output function, in order to implement the system that we have. 
Afterwards, we continue with creating and initializing the two matrices: Q and R.
Finally, an instance of UKF class is created afterwards followed by initialization of state variables.
\n\n
The implementation of the UKF is based on the following paper.
\n\n
Wan, E. A., & Van Der Merwe, R. (2006). The unscented Kalman filter for nonlinear estimation. Proceedings of the IEEE 2000 Adaptive Systems for Signal Processing, Communications, and Control Symposium (Cat. No.00EX373), 31(2), 153–158. 
\n\n
The paper can be downloaded from<a href="https://doi.org/10.1109/ASSPCC.2000.882463">here</a>.

\subsection example_ukf Example

Here, we take main10.cpp as an example. This example is adapted from this  
\n
This example is taken from<a href="https://www.mathworks.com/matlabcentral/fileexchange/18217-learning-the-unscented-kalman-filter">here</a>. The nonlinear system is described as follows.
\n
\f[ f = \begin{bmatrix} x_2(k) \\ x_3(k) \\ 0.005 \, x_1(k) \bigg(x_2(k) + x_3(k) \bigg) \end{bmatrix} \f]
\f[ h = \begin{bmatrix} x_1(k) \end{bmatrix} \f]
\f[ x_0 = \begin{bmatrix} 0 \\ 0 \\ 1 \end{bmatrix}\f]
\n
The following lines of codes show how to use the UKF class. As mentioned before, we need to first derive the UKF class and define the virtual functions f (process function) and h (output function).
\n\n
\code{.cpp}
class MyUKF : public UKF
{
public:
    virtual colvec f(const colvec& x, const colvec& u) {
        colvec xk(nStates_);
        xk.at(0) = x(1);
        xk.at(1) = x(2);
        xk.at(2) = 0.05*x(0)*(x(1)+x(2));
        return xk;
    }

    virtual colvec h(const colvec& x) {
        colvec zk(nOutputs_);
        zk(0) = x(0);
        return zk;
    }
};

/////////////////////////////////////////////////////////////////////////////

int main(int argc, char** argv)
{
    mat Q(3, 3);
    mat R(1, 1);


    MyUKF myukf;

    double r = 0.1;
    double q = 0.1;
    
    Q = eye(3,3)*q*q;
    R << r*r << endr;

    colvec x0(3);
    x0 << 0 << 0 << 1;

    mat P0 = eye<mat>(3, 3);
    P0 =  P0;

    colvec u;

    // No inputs
    u = u.zeros();

    myukf.InitSystem(3, 1, Q, R);
    myukf.InitSystemState(x0);
    myukf.InitSystemStateCovariance(P0);

    for (int k = 0; k < 20; k++) {
        myukf.UKalmanf(u);

        colvec *x = myukf.GetCurrentState();
        colvec *x_m = myukf.GetCurrentEstimatedState();
        colvec *z = myukf.GetCurrentOutput();
        colvec *z_m = myukf.GetCurrentEstimatedOutput();
    }

    return 0;
}
\endcode
\n\n
These are the plots that show comparisons between measurements and estimations of the three states: \f$x_1\f$, \f$x_2\f$ and \f$x_3\f$.
\n
@image HTML ../images/ex10.png


\section practical-application Practical application: Kalman filter for noisy measurements 

The examples we have so far are theoritical. Very often what we would like to do is simply to 
reduce noise from preacquired measurement data. There are several reason why we want to use Kalman filter. 
For example, the noise has very wide spectrum, thus, using frequency based filter hurts the data.
\n\n
Principally, there are two scenarios of using the Kalman filter.
The first scenario is by first simulating the system as shown in the figure below.  
In this scenario, we only need to supply \f$u_k\f$ to the Kalman filter function. 
Here, the Kalman filter gives us four outputs, which are: \f$x_k\f$, \f$z_k\f$, \f$\hat{x}_k\f$, and \f$\hat{z}_k\f$.
\f$x_k\f$ and \f$z_k\f$ are called the true states and the true outputs, respectvely. They are noisy.
\f$\hat{x}_k\f$, and \f$\hat{z}_k\f$ are called the estimated states and the estimated outputs, respectively. 
They are filtered, look smoother and closer to the noisless true states.
\n\n
The function prototype for this scenario can be written as:
\n
[\f$x_k\f$, \f$z_k\f$, \f$\hat{x}_k\f$, \f$\hat{z}_k\f$] = function kalmanf( \f$u_k\f$)
\n
@image HTML ../images/Kalman_concept1.jpg
\n\n
The second scenario is used when the measurements are availble. 
Thus, simulating the system becomes unnecessary. 
In this scenario, we need to supply \f$z_k\f$ and \f$u_k\f$ to the kalman filter function. 
The Kalman filter will give us 2 outputs: \f$\hat{x}_k\f$ (the estimated system sates) and \f$\hat{z}_k\f$ (the estimated system outputs).
\n\n
The function prototype for this scenario can be written as:
\n
[\f$\hat{x}_k\f$, \f$\hat{z}_k\f$] = function kalmanf( \f$z_k\f$,  \f$u_k\f$)
\n
@image HTML ../images/Kalman_concept2.jpg
\n
The second scenario is useful for smoothing noisy measurment data. However, both scenarios are availabe in this library. 
\n

\subsection practical_example Example

As an example, we will take the problem in main1.cpp. 
This time, however, we assume we already had several noisy data points from measurements.
Therfore, we will not need the Kalman procedure to simulate the system.
\n
The system model can be formulated into:
\n
\f[x_k = x_{k-1} + v_{k-1}\f]
\f[z_k = x_k + w_ḳ\f]
\n
We then generate random number as the prerecorded noisy data (**z_measurement**), as the following:
\n\n
\code{.cpp}
// Assume we have a noisy signal that is acquired from a measurement tool
double w = 2; // Stdev of the noise, in reality we don't know this
colvec z_measurement(1);
z_measurement.randn(1);
z_measurement = z_measurement * w + 12.0;
\endcode
\n\n
After than, **z_measurement** is then sent to the Kalman filter function, as the following:
\n\n
\code{.cpp}
// Put the z_measurment to the Kalman filter
kalman.Kalmanf(z_measurement, u);

colvec *z_m = kalman.GetCurrentEstimatedOutput();
colvec *x_m = kalman.GetCurrentEstimatedState();
\endcode
\n\n
The **kalman.Kalmanf(z_measurement, u)** function above has different parameters with what we can find in main1.cpp.
Since **z_measurement** is available, we then send it as a parameter for the **kalmanf** function. 
The processes above are done in several iterations according to the number of the availabe data points. 
The final codes will look like as the following:
\n\n
\code{.cpp}
int main(int argc, char** argv)
{      
  // Log the result into a tab delimitted file, later we can open 
  // it with Matlab. Use: plot_data7.m to plot the results.
  
  ofstream log_file;
  log_file.open("log_file7.txt");
  
  // Define the system and initialize the Kalman filter
   
  mat A(1,1), B(1,1), H(1,1), Q(1,1), R(1,1);
  colvec u(1);
  colvec x0(1);  
    
  A << 1;
  B << 1;
  Q << 0.01; // Heuristic tuning parameter
  H << 1;
  R << 1;    // Heuristic tuning parameter
  u << 0;
    
  KF kalman;
  kalman.InitSystem(A, B, H, Q, R);
    
  int N = 500;
  
  for (int k = 0; k < N; k++) {
        
    // Assume we have a noisy signal that is acquired from a measurement tool
    double w = 2; // Stdev of the noise, in reality we don't know this
    colvec z_measurement(1);
    z_measurement.randn(1);
    z_measurement = z_measurement * w + 12.0;
      
    // Put the z_measurment to the Kalman filter
    kalman.Kalmanf(z_measurement, u);
      
    colvec *z_m = kalman.GetCurrentEstimatedOutput();
    colvec *x_m = kalman.GetCurrentEstimatedState();
     
    log_file << k << '\t' << z_measurement.at(0,0) << '\t' << z_m->at(0,0)  
             << '\n'; 
  }
  return 0;
}
\endcode
\n\n
The values that are given to **Q** and **R** are defined **heuristically** since we do not know the actual variances of the noise of the data.
\n
@image HTML ../images/ex7.png

*/
